from storage import db
from config import TELEGRAM_API_KEY
from memory import Memory, User
from functions import get_keyboard, get_group_id, get_inline_keyboard, get_default_inline_keyboard
from datetime import datetime, timedelta
import asyncio
import httpx

memory = Memory()

async def handle_update(update):
    data = update
    if 'callback_query' in data:
        data = data['callback_query']
        user = memory.get_user(data['message']['chat'])
        callback_data = data['data']
        if 'timetable_mem' not in callback_data:
            await user.answer_callback(data['id'])
        if callback_data == 'timetable_mem':
            if not user.group_id:
                await user.send_welcome(message='‚ö†Ô∏è <b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n‚ÑπÔ∏è <i>–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>')
                return True
            try:
                await user.send_timetable(
                    datetime.now()
                )
            except Exception as e:
                user.log(f'Servers MPEI is offline, error: {e} (caused by send_timetable)')
                await user.answer_callback(
                    data['id'],
                    text='–°–µ—Ä–≤–µ—Ä–∞ –ú–≠–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
                )
        elif 'timetable_mem_' in callback_data:
            tstamp = int(callback_data.replace('timetable_mem_', ''))
            try:
                await user.send_timetable(datetime.utcfromtimestamp(tstamp) + timedelta(hours=3))
            except Exception as e:
                user.log(f'Servers MPEI is offline, error: {e} (caused by send_timetable)')
                await user.answer_callback(
                    data['id'],
                    text='–°–µ—Ä–≤–µ—Ä–∞ –ú–≠–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
                )
        elif callback_data == 'timetable_search':
            user.action = 'timetable_search_input'
            await user.send_message(
                'üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> –ò–≠-46-20',
                reply_markup=get_keyboard([['–û—Ç–º–µ–Ω–∞']])
            )
        elif callback_data == 'settings':
            await user.send_settings()
        elif callback_data == 'setting_toggle_lessonNotification_previously':
            if user.settings['lesson_notification_previously']['enabled']:
                user.settings['lesson_notification_previously'] = {
                    'enabled': False
                }
                user.upload_settings()
                await user.send_settings()
            else:
                user.action = 'toggle_lessonNotification_previously'
                await user.send_message(
                    'üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> 15\n\n<i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä–∞—Ö –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞</i>',
                    get_keyboard([['–û—Ç–º–µ–Ω–∞']])
                )
        elif callback_data == 'setting_toggle_lessonNotification_beginning':
            if user.settings['lesson_notification_beginning']['enabled']:
                user.settings['lesson_notification_beginning'] = {
                    'enabled': False
                }
            else:
                user.settings['lesson_notification_beginning'] = {
                    'enabled': True
                }
            user.upload_settings()
            await user.send_settings()
            return True
        elif callback_data == 'feedback':
            user.log('Open feedback, yee')
            await user.edit_message(
                f"""‚ùì <b>–û –±–æ—Ç–µ</b>

üéì –ù–∞—à–∏–º –±–æ—Ç–æ–º –ø–æ–ª—å–∑—É–µ—Ç—Å—è <b>{db.users.count_documents({})} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</b>

<i>–î–æ–Ω–∞—Ç:</i>
<b>QIWI/BANK</b> +79255549461
<b>BITCOIN</b> (—Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @psylopunk""",
                reply_markup=get_inline_keyboard([
                    [{'text': '–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', 'url': 'https://t.me/psylopunk'}],
                    [{'text': '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)', 'url': 'https://github.com/psylopunk/mpei-timetable-bot'}],
                    [{'text': '–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô', 'callback_data': 'home'}]
                ])
            )
            await user.send_message('<code>1QDXmdfA7jW3JDewoAvWB5hn66eXrp1aNw</code>')
        elif callback_data == 'home':
            await user.send_welcome()
        return True
    elif 'message' in data:
        data = data['message']
        user = memory.get_user(data['chat'])
        try:
            text = data['text']
        except Exception as e:
            memory.log(f'Invalid message: {data}')
            memory.log(f'|^| ERROR |^|: {e}')
            user.save_message(data['message_id'])

        # if user.telegram_id not in [1748150734]:
        #     await user.send_message('‚ö†Ô∏è <b>–ë–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>')
        #     return True

        if text != '/start':
            user.save_message(data['message_id'])

        if text in ['/start', '–û—Ç–º–µ–Ω–∞']:
            await user.send_welcome()
            return True

        if user.action:
            if text == '–û—Ç–º–µ–Ω–∞':
                await user.send_welcome()
                return True
            if user.action == 'timetable_search_input':
                group_id, group_name = get_group_id(text)
                if not group_id:
                    await user.send_message(
                        '‚ö†Ô∏è <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã',
                        reply_markup=get_keyboard([["–û—Ç–º–µ–Ω–∞"]])
                    )
                    return True
                user.set_group(group_name, group_id)
                await user.send_welcome(message='‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>')
                return True
            elif user.action == 'toggle_lessonNotification_previously':
                if not text.isdigit():
                    await user.send_message(
                        '‚ö†Ô∏è <b>–í—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç',
                        reply_markup=get_keyboard([['–û—Ç–º–µ–Ω–∞']])
                    )
                user.settings['lesson_notification_previously'] = {
                    'enabled': True,
                    'minutes': int(text)
                }
                user.clear_action()
                user.upload_settings()
                await user.send_settings()
                return True
            return True
            # return True

        await user.send_message('‚ö†Ô∏è <b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞</b> /start')



    return True

async def polling():
    if not db.memory.count_documents({
        'key': 'last_timeout_error'
    }):
        db.memory.insert_one({
            'key': 'last_timeout_error',
            'value': datetime.now()
        })

    async with httpx.AsyncClient() as client:
        while True:
            try:
                res = (
                    await client.get(
                        f'https://api.telegram.org/bot{TELEGRAM_API_KEY}/getUpdates?offset={memory.last_update_id + 1}'
                    )
                ).json()
            except Exception as e:
                print(f'Error [{e}] (caused by polling.request)')
                continue

            if not res['ok']:
                memory.log(f'Error from Telegram: {res}')
                continue

            updates = res['result']
            # print(len(updates))
            if updates:
                memory.set_last_update_id(updates[-1]['update_id'])
                for update in updates:
                    await handle_update(update)

            await asyncio.sleep(.01)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(
        polling()
    )
    loop.run_forever()