from sanic import Sanic, response
import config
import datetime
import uuid
import models

memory = models.Memory()
app = Sanic(__name__)

@app.route("/")
async def s_index(request):
    return response.text("OK")

@app.route("/t_webhook", methods=["POST"])
async def s_twebhook(request):
    data = request.json
    # print(data)
    if "callback_query" in request.json:
        data = request.json["callback_query"]
        user = memory.get_user_by_chat(data["message"]["chat"])
        if not user.check_update_id(request.json["update_id"]): return response.text("OK")
        user.answer_callback(data["id"])
        callback_data = data["data"]
        print("Callback data: %s" % callback_data)
        if callback_data == "timetable_mem":
            if not user.group_id:
                user.send_welcome("‚ö†Ô∏è <b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n‚ÑπÔ∏è <i>–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>")
                return response.text("OK")
            user.send_timetable(datetime.datetime.now())
        elif "timetable_mem_" in callback_data:
            tstamp = int(callback_data.replace("timetable_mem_", ""))
            user.send_timetable(datetime.datetime.utcfromtimestamp(tstamp) + datetime.timedelta(hours=3))
        elif callback_data == "timetable_search":
            user.action = "timetable_search_input"
            user.send_message("üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> –ò–≠-46-20", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]]))
        elif callback_data == "building_locations":
            user.edit_message("""üìç <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–æ–≤</b>

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–µ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</i>

<i>–ü–æ–∑–∂–µ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∫–∞—Ä—Ç—ã –∫–æ—Ä–ø—É—Å–æ–≤, –Ω–æ –ø–æ–∫–∞ –µ–µ –Ω–µ—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏</i>

<i>–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å —Å —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</i>

üëâ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –∫–æ—Ä–ø—É—Å–∞""", \
                reply_markup=models.get_inline_keyboard([ \
                    [{"text": n, "callback_data": "building_location_%s" % n.encode("utf8").hex()} for n in "–ê–ë–í–ì–î–ï–ñ–ó–ò–ö–õ–ú–ù–†–°–¢–§–•"], \
                    [{"text": "–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô", "callback_data": "home"}]
            ], row_width=3))
        elif "building_location_" in callback_data:
            if "lmid" in user.data: user.delete_message(user.data["lmid"])
            building_name = bytearray.fromhex(callback_data.replace("building_location_", "").strip()).decode("utf8")
            coordinates = config.BUILDINGS[building_name]
            r = user.send_location(coordinates[0], coordinates[1])
            if r: user.data["lmid"] = r.message_id
        elif callback_data == "bells_sticker":
            user.send_sticker("CAACAgIAAxkBAAIT8V9WLBPE8NxjsDzE_1e0DQNWIs1YAAJqCAACifCwSsu2IvEXtjwzGwQ")
        elif callback_data == "settings":
            user.send_settings()
        elif callback_data == "setting_toggle_lnotification":
            if "lesson_notification" not in user.settings:
                user.settings["lesson_notification"] = {"enabled": False}
                user.upload_settings()
            if user.settings["lesson_notification"]["enabled"]:
                user.settings["lesson_notification"] = {"enabled": False}
                user.upload_settings()
                user.send_settings()
            else:
                user.action = "toggle_lnotification"
                user.send_message("üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n<i>–ü—Ä–∏–º–µ—Ä:</i> 15\n\n<i>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä–∞—Ö –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞</i>", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]]))
        elif callback_data == "share":
            user.send_share()
        elif callback_data == "feedback":
            user.edit_message("""‚ùì <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

–ö—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞? <a href="https://gurov.co/">gurov.co</a>

<i>–î–æ–Ω–∞—Ç:</i>
<b>QIWI</b> +79255549461
<b>BITCOIN</b> (—Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @psylopunk""", \
                disable_web_page_preview=None, \
                reply_markup=models.get_inline_keyboard([ \
                [{"text": "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "url": "https://t.me/psylopunk"}],
                [{"text": "–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô", "callback_data": "home"}]
            ]))
            user.send_message("<code>1QDXmdfA7jW3JDewoAvWB5hn66eXrp1aNw</code>")
        elif callback_data == "home": user.send_welcome()
        return response.text("OK")
    elif "message" in data:
        data = data["message"]
        user = memory.get_user_by_chat(data["chat"])
        if not user.check_update_id(request.json["update_id"]): return response.text("OK")
        user.save_message(data["message_id"])
        try: text = data["text"]
        except Exception as e:
            print(data)
            print("Error: [%s] (caused by get text by message)" % e)
            return response.text("OK")
        if user.action:
            if text == "–û—Ç–º–µ–Ω–∞":
                user.send_welcome()
                return response.text("OK")
            if user.action == "timetable_search_input":
                group_id, group_name = models.get_group_id(text)
                if not group_id:
                    user.send_message("‚ö†Ô∏è <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]]))
                    return response.text("OK")
                user.set_group(group_name, group_id)
                user.send_welcome(message="‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>")
            elif user.action == "toggle_lnotification":
                if not text.isdigit():
                    user.send_message("‚ö†Ô∏è <b>–í—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]]))
                    return response.text("OK")
                user.settings["lesson_notification"] = {"enabled": True, "minutes": int(text)}
                user.upload_settings()
                user.send_settings()
            else: user.send_welcome()
            return response.text("OK")
        if "/start" in text:
            group = text.replace("/start", "").strip()
            try:
                if group:
                    group_id, group_name = models.get_group_id(bytearray.fromhex(group).decode("utf8"))
                    if group_id: user.set_group(group_name, group_id)
            except Exception as e:
                print("Error [%s] (caused by /start)" % e)
            user.send_welcome()
        elif text == "/share":
            user.send_share()
            user.delete_message(data["message_id"])
        else:
            user.send_message("‚ö†Ô∏è <b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞</b> /start")
        return response.text("OK")
    return response.text("OK")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8082)
