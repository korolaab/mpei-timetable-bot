from sanic import Sanic, response
import config
import datetime
import uuid
import models
import qrcode

memory = models.Memory()
app = Sanic(__name__)

@app.route("/")
async def s_index(request):
    return response.text("OK")

@app.route("/t_webhook", methods=["GET", "POST"])
async def s_twebhook(request):
    print(request.json)
    data = request.json
    if "callback_query" in request.json:
        data = request.json["callback_query"]
        user = memory.get_user_by_chat(data["message"]["chat"])
        user.answer_callback(data["id"])
        callback_data = data["data"]
        if callback_data == "timetable_mem":
            if not user.group_id:
                user.send_welcome("‚ö†Ô∏è <b>–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã</b>\n\n‚ÑπÔ∏è <i>–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ</i>")
                return response.text("OK")
            user.send_timetable(datetime.datetime.now() + datetime.timedelta(hours=3))
        elif "timetable_mem_" in callback_data:
            tstamp = int(callback_data.replace("timetable_mem_", ""))
            user.send_timetable(datetime.datetime.utcfromtimestamp(tstamp) + datetime.timedelta(hours=3))
        elif callback_data == "timetable_search":
            user.action = "timetable_search_input"
            m_id = user.send_message("üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]])).message_id
            user.data = {"msg_ids": [m_id]}
        elif callback_data == "share":
            qr = qrcode.QRCode(version=4, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10,border=1)
            qr.add_data("https://t.me/mpei_timetable_bot%s" % (("?start=%s" % user.group) if user.group else ""))
            qr_file = "%s" % uuid.uuid4()
            qr.make_image(fill_color="black", back_color="white").save("/data/qr_codes/%s.png" % qr_file)
            user.edit_message("""üíé <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏</b>

–ü–æ–∫–∞–∂–∏ —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É QR-–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–º—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π

%s""" % ("https://t.me/mpei_timetable_bot%s" % (("?start=%s" % user.group) if user.group else "")), reply_markup=models.get_inline_keyboard([[{"text": "–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô", "callback_data": "home"}]]))
            with open("/data/qr_codes/%s.png" % qr_file, "rb") as file: user.send_photo(file)
        elif callback_data == "feedback":
            user.edit_message("""‚ùì <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>

–ö—Ç–æ —Å–¥–µ–ª–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞? <a href="https://gurov.co/">gurov.co</a>

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @psylopunk""", \
                reply_markup=models.get_inline_keyboard([ \
                [{"text": "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", "url": "https://t.me/psylopunk"}],
                [{"text": "–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô", "callback_data": "home"}]
            ]))
        elif callback_data == "home": user.send_welcome()
        return response.text("OK")
    elif "message" in data:
        data = data["message"]
        user = memory.get_user_by_chat(data["chat"])
        user.save_message(data["message_id"])
        text = data["text"]
        if user.action:
            if text == "–û—Ç–º–µ–Ω–∞": user.send_welcome()
            if user.action == "timetable_search_input":
                group_id = models.get_group_id(text)
                if not group_id:
                    user.send_message("‚ö†Ô∏è <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã", reply_markup=models.get_keyboard([["–û—Ç–º–µ–Ω–∞"]]))
                    return response.text("OK")
                user.set_group_id(text, group_id)
                user.send_welcome(message="‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞</b>")
            return response.text("OK")
        if text == "/start":
            user.send_welcome()
        else:
            user.send_message("‚ö†Ô∏è <b>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞</b> /start")
        return response.text("OK")
    return response.text("OK")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8082)
