from storage import db
from config import TELEGRAM_API_KEY
from aiogram import Bot
from functions import log, get_default_inline_keyboard, get_keyboard, get_inline_keyboard
from datetime import datetime

bot = Bot(token=TELEGRAM_API_KEY)

class User:
    def log(self, text: str):
        log(f'[{self}] {text}')

    def __repr__(self):
        return f'User(telegram_id={self.telegram_id}, first_name={self.first_name}, last_name={self.last_name}, username={self.username})'

    def __init__(self, user_object):
        self._id = user_object['_id'] if '_id' in user_object else None
        self.telegram_id = user_object['tid']
        self.balance = user_object['balance']
        self.message_id = user_object['message_id']
        self.username = user_object['username'] if 'username' in user_object else None
        self.first_name = user_object['first_name'] if 'first_name' in user_object else None
        self.last_name = user_object['last_name'] if 'last_name' in user_object else None
        self.group = user_object['group']
        self.group_id = user_object['group_id']
        self.history_messages_id = user_object['history_messages_id']
        self.settings = user_object['settings']
        self.last_update_id = 0

        db.users.update_one({
            'tid': self.telegram_id
        }, {
            '$set': {
                'last_use': datetime.now()
            }
        })

        self.clear_action()

    async def send_welcome(self, message=None):
        self.clear_action()
        await self.clear_messages()
        if self.message_id:
            await self.delete_message(self.message_id)

        GROUP_NOT_SETTED = '‚ö†Ô∏è <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</b>\n<i>–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</i>'
        m = await self.send_message(
            f"""{message if message else 'üíé <b>–ü—Ä–∏–≤–µ—Ç, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ú–≠–ò</b>'}

{f'üë• –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: <b>{self.group}</b>' if self.group else GROUP_NOT_SETTED}            

–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ üëá""",
            save=False,
            reply_markup=get_default_inline_keyboard(self)
        )
        if m:
            self.message_id = m.message_id
            db.users.update_one({
                '_id': self._id
            }, {
                '$set': {
                    'message_id': self.message_id
                }
            })


    async def send_message(self, message, save=True, *args, **kwargs):
        try:
            r = await bot.send_message(
                self.telegram_id,
                message,
                parse_mode='html',
                *args,
                **kwargs
            )
            if save:
                self.save_message(r.message_id)
            return r
        except Exception as e:
            self.log(f'Error (cause.sendMessage): {e}')

    async def delete_message(self, message_id):
        try:
            await bot.delete_message(self.telegram_id, message_id)
        except Exception as e:
            self.log(f'Error (cause.deleteMessage): {e}')

    async def edit_message(self, text, *args, **kwargs):
        await self.clear_messages()
        try:
            return await bot.edit_message_text(
                chat_id=self.telegram_id,
                message_id=self.message_id,
                text=text,
                parse_mode='html',
                *args,
                **kwargs
            )
        except Exception as e:
            self.log(f'Error (cause.editMessage): {e}')
            return False

    def clear_action(self):
        self.action = None
        self.data = {}

    def upload_settings(self):
        db.users.update_one({
            '_id': self._id
        }, {
            '$set': {
                'settings': self.settings
            }
        })

    def set_group(self, group, group_id):
        self.group = group.upper()
        self.group_id = group_id
        db.users.update_one({
            '_id': self._id
        }, {
            '$set': {
                'group': self.group,
                'group_id': self.group_id
            }
        })

    async def clear_messages(self):
        for message_id in self.history_messages_id:
            await self.delete_message(message_id)
        self.history_messages_id = []
        db.users.update_one({
            '_id': self._id
        }, {
            '$set': {
                'history_messages_id': []
            }
        })

    async def answer_callback(self, cd_id, text=None):
        try:
            await bot.answer_callback_query(
                callback_query_id=cd_id,
                text=(text or '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'),
                show_alert=False
            )
        except Exception as e:
            self.log(f'Error (cause.answerCallback): {e}')

    async def send_settings(self):
        await self.clear_messages()
        print(self._id)
        print(self.settings)
        await self.edit_message(
            """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –ø–∞—Ä—ã</b>
<i>–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è, –∑–∞ —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—ã, –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</i>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—ã</b>
<i>–í–∫–ª—é—á–∏–≤ —ç—Ç—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã</i>""",
            reply_markup=get_inline_keyboard([
                [{
                    'text': f"""{'üü¢' if self.settings['lesson_notification_previously']['enabled'] else 'üî¥'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –ø–∞—Ä—ã""",
                    'callback_data': 'setting_toggle_lessonNotification_previously'
                }],
                [{
                    'text': f"""{'üü¢' if self.settings['lesson_notification_beginning']['enabled'] else 'üî¥'} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—ã""",
                    'callback_data': 'setting_toggle_lessonNotification_beginning'
                }],
                [{
                    'text': '–ù–∞ –≥–ª–∞–≤–Ω—É—é üîô',
                    'callback_data': 'home'
                }]
            ])
        )

    def save_message(self, message_id):
        self.history_messages_id.append(message_id)
        db.users.update_one({
            '_id': self._id
        }, {
            '$set': {
                'history_messages_id': self.history_messages_id
            }
        })

    @classmethod
    def from_tid(cls, tid):
        user_object = db.users.find_one({
            'tid': int(tid)
        })
        if not user_object:
            raise Exception('User not found')

        return User(user_object)